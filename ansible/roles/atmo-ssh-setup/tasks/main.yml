---

# TODO NOTE: when moving to ansible 2.0 we should use ansible_host, ansible_port, and ansible_user
- name: test default ansible connection
  local_action: "shell ssh -p {{ ansible_ssh_port }} root@{{ ansible_ssh_host }} 'echo hello world test' | grep 'hello world test'"
  register: default_remote_user
  ignore_errors: yes
  failed_when: False

###
# CENTOS SETUP
###
- name: test centos connection
  local_action: "shell ssh -p {{ ansible_ssh_port }} centos@{{ ansible_ssh_host }} 'echo hello'"
  register: centos_remote_user
  ignore_errors: yes
  failed_when: False
  when: default_remote_user|failed

# note: success is apparently not a complete condition, must also check for skipped state
- name: register use_remote_user = centos
  set_fact: use_remote_user=centos
  when: not centos_remote_user|skipped and centos_remote_user|success

- include: setup-root.yml
  when: not centos_remote_user|skipped and centos_remote_user|success

###
# UBUNTU SETUP
###
- name: test ubuntu connection
  local_action: "shell ssh -p {{ ansible_ssh_port }} ubuntu@{{ ansible_ssh_host }} 'echo hello'"
  register: ubuntu_remote_user
  ignore_errors: yes
  failed_when: False
  when: default_remote_user|failed and centos_remote_user|failed

# note: success is apparently not a complete condition, must also check for skipped state
- name: register use_remote_user = ubuntu
  set_fact: use_remote_user=ubuntu
  when: not ubuntu_remote_user|skipped and ubuntu_remote_user|success

- include: setup-root.yml
  when: not ubuntu_remote_user|skipped and ubuntu_remote_user|success

###
# WRAP-UP CLOUD USER FIX
###
- name: root should be able to access at this point. perform a simple ping
  ping:

# this may be needed when default_remote_user succeeded
- name: make sure ssh directory exists
  file: path=/root/.ssh/ state=directory mode="0700"
  when: default_remote_user|success

# this is duplicated code from that of the setup-root, but this needs to be run if root succeeded initially
- name: add ssh keys to authorzied_keys
  authorized_key: user=root key="{{ item }}" state=present
  with_items:
    SSHKEYS
  when: default_remote_user|success

# at this point, we could disable cloud user, but for now, let's leave in.

###
# OTHER SSH CONFIG CHANGES
##
- name: /etc/ssh/sshd_config changes
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="{{ item.regexp }}" line="{{ item.line }}"
  with_items:
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin without-password'}
    - { regexp: '^UseDNS', line: 'UseDNS no'}

- name: Remove all AllowUsers lines to /etc/sshd_config
  lineinfile: dest=/etc/ssh/sshd_config regexp="AllowUsers" state=absent
  tags:
    - debug
    - delete

- name: Append AllowGroups Line to /etc/ssh/sshd_config 
  lineinfile: dest=/etc/ssh/sshd_config line="AllowGroups root users"
  tags:
    - debug

- name: manual OS detection
  stat: path=/etc/redhat-release
  register: os_ver
  tags:
    - debug
    - ssh-restart

- name: restart ssh if ubuntu
  service: name=ssh state=restarted
  when: not os_ver.stat.exists
  tags:
    - debug
    - ssh-restart

- name: restart sshd if centos
  service: name=sshd state=restarted
  when: os_ver.stat.exists
  tags:
    - debug
    - ssh-restart
