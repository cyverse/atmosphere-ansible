---

# We need to set this fact because on the following local_actions, ansible_host is localhost
- name: Get VM IP address
  set_fact:
    vm_ip: "{{ ansible_host }}"

# SSH as different users to determine which can connect (and determine linux distro)
- block:
  - name: Test default ansible connection and register root_connection
    local_action: >
      command ssh {{ SSH_OPTIONS }} -p {{ ansible_port }} root@{{ vm_ip }} echo "Atmosphere is cool!"
    failed_when: false
    register: root_connection

  - name: Test CentOS connection and register centos_connection
    local_action: >
      command ssh {{ SSH_OPTIONS }} -p {{ ansible_port }} centos@{{ vm_ip }} echo "Atmosphere is cool!"
    register: centos_connection
    failed_when: false
    when: "(root_connection is defined) and (root_connection.stdout is defined) and
           ('Atmosphere is cool!' not in root_connection.stdout)"

  - name: Test Ubuntu connection and register ubuntu_connection
    local_action: >
      command ssh {{ SSH_OPTIONS }} -p {{ ansible_port }} ubuntu@{{ vm_ip }} echo "Atmosphere is cool!"
    register: ubuntu_connection
    failed_when: false
    when: "(root_connection is defined) and (root_connection.stdout is defined) and
           ('Atmosphere is cool!' not in root_connection.stdout) and
           (centos_connection is defined) and (centos_connection.stdout is defined) and
           ('Atmoshphere is cool!' not in centos_connection.stdout)"
  ignore_errors: True

# Set use_remote_user depending on which SSH task succeeded
- block:
  - name: Set use_remote_user variable to "centos"
    set_fact: use_remote_user=centos
    when: "(centos_connection is defined) and (centos_connection.stdout is defined) and (not centos_connection|skipped) and
           ('Atmosphere is cool!' in centos_connection.stdout)"

  - name: Set use_remote_user variable to "ubuntu"
    set_fact: use_remote_user=ubuntu
    when: "(ubuntu_connection is defined) and (ubuntu_connection.stdout is defined) and (not ubuntu_connection|skipped) and
           ('Atmosphere is cool!' in ubuntu_connection.stdout)"

  - name: Set use_remote_user variable to "root"
    set_fact: use_remote_user=root
    when: "(root_connection is defined) and (root_connection.stdout is defined) and
           ('Atmosphere is cool!' in root_connection.stdout)"

- name: Fail if use_remote_user cannot be found
  fail:
    msg: "No remote connection established, atmo-ssh-setup can not continue."
  when: use_remote_user is not defined

- name: Manual Ubuntu version detection
  raw: >
    grep -q 'DISTRIB_RELEASE=16\.04' /etc/lsb-release
  register: ubuntu16
  remote_user: "{{ use_remote_user }}"
  ignore_errors: True
  when: use_remote_user == "ubuntu"

# Install Python2.7 for Ubuntu 16.04 since it uses Python3 by default and ansible_distribution
# requires Python2.7. Ansible 2.2 includes experimental support for Python3
- block:
  - name: Install Python2 on Ubuntu 16.04
    raw: >
      test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
    become: True

  - name: Set ansible_python_interpreter to python2.7 on Ubuntu 16.04
    set_fact: ansible_python_interpreter=/usr/bin/python2.7
  remote_user: "{{ use_remote_user }}"
  when: use_remote_user == "ubuntu" and ubuntu16.rc == 0

- name: Include root-setup.yml, use_remote_user will be ubuntu, centos, or root
  include: root-setup.yml
  become: True
  remote_user: "{{ use_remote_user }}"

- name: Now that root access is available, include ssh-setup.yml
  include: ssh-setup.yml
