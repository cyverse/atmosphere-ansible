- name: INCLUDE_VARS; gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"

  # this fixes error when apt update_cache error out due to clock out of sync
  - name: sync time with hardware clock
    shell: hwclock -s
    ignore_errors: yes

  #####
  # This block is specifically needed to deal with Jetstream idiosyncrasies related to centos mirrors and dhclient warning
  # If this is not done and if the vm is plagued with a dhcp, then package updates will fail :(
  ####
- name: FILE; ensure /var/log/atmo exists, needed for dhcp client script
  file:
    path: /var/log/atmo
    state: directory
    mode: '0755'

- name: SHELL; added this hack for Centos 7+ --  dhclient ip release, sleep, then dhclient
  shell: /usr/sbin/dhclient -r ; sleep 1; /usr/sbin/dhclient
  when: DHCP_RESTART_ENABLE is defined and DHCP_RESTART_ENABLE|bool and ansible_distribution == 'CentOS' and ansible_distribution_major_version|int >= 7

  #####
  # This is needed to detect gui
  #####
- name: Verify that X server exists
  stat:
    path: '{{ XGUI.xsession_path }}'
  register: xsession

- name: Verify that xterm session exists
  stat:
    path: '{{ XGUI.xterm_path }}'
  register: xterm

- name: Set flag for GUI systems
  set_fact:
    HAS_GUI: '{{ xsession.stat.exists and xterm.stat.exists }}'

  #####
  # For Ubuntu, add ansible ppa
  #####
- name: APT_REPOSITORY; for ubuntu, add the ansible official repo before installing packages
  apt_repository:
    repo: 'ppa:ansible/ansible'
    state: present
  when: ansible_distribution == "Ubuntu"

# Note: per some discussions, it's better to pass package names as arrays rather than iterate e.g. loop 
- name: PACKAGES; uninstall specific packages
  package:
    name: "{{ PACKAGES_PRE_REMOVE }}"
    state: absent
  register: result
  until: result is success
  retries: "{{ PACKAGE_RETRIES }}"
  delay: "{{ PACKAGE_DELAY }}"
  when: PACKAGES_PRE_REMOVE.0 is defined

  #####
  # CHECK for PACKAGE_NO_UPDATES
  #####
- name: SET_FACT; set the PACKAGE_INSTALL_STATE
  set_fact:
    PACKAGE_INSTALL_STATE: "{{ 'present' if PACKAGE_NO_UPDATES is defined and PACKAGE_NO_UPDATES == true else 'latest' }}"

- name: DEBUG; echoing the current PACKAGE_INSTALL_STATE
  debug:
    msg: "package install state will be {{ PACKAGE_INSTALL_STATE }}"

  #####
  # BUILD THE PACKAGE_INSTALL VARIABLE
  #####
- name: SET_FACT; set PACKAGES_INSTALL = PACKAGES_COMMON
  set_fact:
    PACKAGES_INSTALL: "{{ PACKAGES_COMMON }}"

- name: SET_FACT; merge atmo-dhcp role packages
  set_fact:
    PACKAGES_INSTALL: "{{ PACKAGES_INSTALL + PACKAGES_DHCP }}"
  when: SETUP_DHCP_CLIENT is defined and SETUP_DHCP_CLIENT == true and PACKAGES_DHCP is defined

- name: SET_FACT; merge atmo-ntp role packages
  set_fact:
    PACKAGES_INSTALL: "{{ PACKAGES_INSTALL + PACKAGES_NTP }}"
  when: PACKAGES_NTP is defined

- name: SET_FACT; merge ldap role packages
  set_fact:
    PACKAGES_INSTALL: "{{ PACKAGES_INSTALL + PACKAGES_LDAP }}"
  when: SETUP_LDAP is defined and SETUP_LDAP == true and PACKAGES_LDAP is defined

  # These variables are only necessary for gui-based vms
- block:

  - name: SET_FACT; merge atmo-vnc role packages
    set_fact:
      PACKAGES_INSTALL: "{{ PACKAGES_INSTALL + PACKAGES_REALVNC }}"
    when: SETUP_REALVNC_SERVER is defined and SETUP_REALVNC_SERVER == true

  - name: SET_FACT; merge atmo-gui-tweaks role packages
    set_fact:
      PACKAGES_INSTALL: "{{ PACKAGES_INSTALL + PACKAGES_GUI_TWEAKS }}"
    when: SETUP_GUI_BROWSER is defined and SETUP_GUI_BROWSER == true

  # call out to another file to include the proper terminal
  - include: 'terminal.yml'

  when: HAS_GUI|bool

  #####
  # INSTALL PREINSTALL PACKAGES, THEN PACKAGES
  #####
- name: PACKAGES; install preliminary packages
  package:
    name: "{{ PACKAGES_PREINSTALL }}"
    state: "{{ PACKAGE_INSTALL_STATE }}"
  register: result
  until: result is success
  retries: "{{ PACKAGE_RETRIES }}"
  delay: "{{ PACKAGE_DELAY }}"
  when: PACKAGES_PREINSTALL is defined and PACKAGES_PREINSTALL.0 is defined

  # updates cache after, since epel is installed for epel as a preinstall
- block:
  - name: SHELL; centos yum check-update - checks for updates, updates is a later task
    shell: yum check-update
    args:
      warn: false
    failed_when: false
    when: ansible_distribution == "CentOS"

  - name: YUM; centos install security updates
    yum:
      name: "*"
      security: yes
      state: latest
    when: ansible_distribution == "CentOS"

  - name: APT; Ubuntu update cache
    apt:
      update_cache: yes
    when: ansible_distribution == "Ubuntu"
  when: PACKAGE_NO_UPDATES is undefined or PACKAGE_NO_UPDATES == false
  
- name: PACKAGES; install distro specific packages
  package:
    name: "{{ PACKAGES_INSTALL }}"
    state: "{{ PACKAGE_INSTALL_STATE }}"
  register: result
  until: result is success
  retries: "{{ PACKAGE_RETRIES }}"
  delay: "{{ PACKAGE_DELAY }}"
