---
###########
# OS vars #
###########
- name: set environment variables for legacy systems
  set_fact: ansible_python_interpreter=/usr/bin/python
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version < '6'
  tags:
    - vnc
    - x
    - tar

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"
  tags:
    - vnc
    - x
    - shell_cmd
    - tar

#########################
# Check for GUI Desktop #
#########################
# Only install VNC Server if VM is NOT headless
- name: verify that X server exists
  stat: path={{ XGUI.xsession_path }}
  register: xsession
  tags:
    - vnc
    - x
    - shell_cmd
    - tar

- name: verify that xterm session exists
  stat: path={{ XGUI.xterm_path }}
  register: xterm 
  tags:
    - vnc
    - x
    - shell_cmd
    - tar

- name: set flag for GUI systems
  set_fact: has_gui={{ xsession.stat.exists and xterm.stat.exists }}
  tags:
    - vnc
    - x
    - shell_cmd
    - tar

# - name: show has_gui flag
#   debug: var=has_gui
#   tags:
#     - vnc
#     - x

###################
# Remove Packages #
###################
- name: remove conflicting ubuntu packages
  apt: name={{ item }} state=absent purge=yes
  with_items: "{{ XGUI.packages_to_remove }}"
  when: has_gui and (ansible_distribution == "Ubuntu")
  tags:
    - uninstall

- name: remove conflicting centos packages
  yum: name={{ item }} state=absent
  with_items: "{{ XGUI.packages_to_remove }}"
  when: has_gui and (ansible_distribution == "CentOS")
  tags:
    - uninstall

#####################
# Set up Files/Dirs #
#####################
# - name: copy vnc password file
#   copy: src=passwd dest="/home/{{ ATMOUSERNAME }}/.vnc/passwd" mode=0600 owner="{{ ATMOUSERNAME }}"
#   when: has_gui
#   tags: vnc 

# - name: copy required files to remote host
#   copy: src={{ item.FROM }} dest={{ item.TO }}
#   with_items: REQUIRED.files_to_add
#   when: has_gui
#   tags: vnc

# wget -qO- http://github.com/kanaka/noVNC/tarball/master -O novnc.tar
# tar -xvf master
# cd kanaka-noVNC-8b0a0f6/

# - name: set flag for older ubuntu systems
#   set_fact: ubuntu12=True
#   when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version < "14")
#   tags:
#     - tar

# - name: set flag for older centos systems
#   set_fact: centos5=True
#   when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version < "6")
#   tags:
#     - tar

- name: unarchive novnc code base for legacy ubuntu systems
  unarchive: src=novnc.tar dest=/opt
  when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version < "14")
  tags:
    - vnc
    - tar

- name: unarchive novnc code base for legacy centos systems
  unarchive: src=novnc.tar dest=/opt
  when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version < "6")
  tags:
    - vnc
    - tar

###############
# VNC Install #
###############
- name: install the dependencies for vncserver
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=present
  with_items: "{{ XGUI.vnc_dependencies }}"
  when: has_gui
  tags: vnc

- name: install vncserver
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=present
  with_items: "{{ XGUI.packages }}"
  when: has_gui
  tags: vnc

- name: remove locks and un-needed files
  shell: /bin/rm -rf {{ item.PATH }}
  with_items: "{{ REQUIRED.files_to_remove }}"
  when: has_gui
  tags: vnc

- name: create needed directories
  file: path={{ item.PATH }} state={{ item.STATE }} mode={{ item.MODE }}
  with_items: "{{ REQUIRED.dirs_to_make }}"
  when: has_gui
  tags: vnc

- name: kill all running vncserver sessions
  shell: /bin/su {{ ATMOUSERNAME }} -c "/usr/bin/vncserver -kill :'{{ item }}'"
  with_items:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
  when: has_gui
  failed_when: False
  tags: kill-vnc

- name: ensure correct permissions
  file: path="{{ item }}" mode=0755
  with_items:
    - /etc/X11/xinit/xinitrc

- name: template xstartup for vncserver
  template: src=xstartup.j2 dest="/home/{{ ATMOUSERNAME }}/.vnc/xstartup" mode=0755
  when: has_gui
  tags: kill-vnc

- name: start vncserver and novnc
  shell: "{{ item }}"
  with_items: "{{ VNC_COMMANDS }}"
  when: has_gui
  ignore_errors: yes
  failed_when: False
  tags:
    - vnc
    - shell_cmd
  register: shell_cmds

- name: debug all shell commands
  debug: var=shell_cmds
  when: has_gui
  tags: 
    - vnc
    - shell_cmd

- name: set environment variables for legacy systems
  set_fact: ansible_python_interpreter=/usr/bin/python26
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version < '6'
  tags:
    - vnc
    - x
