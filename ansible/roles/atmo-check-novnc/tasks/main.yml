---

- name: set environment variables for legacy systems
  set_fact: ansible_python_interpreter=/usr/bin/python
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version < '6'
  tags:
    - vnc
    - x

- name: set environment variables for Ubuntu 20+
  set_fact: ansible_python_interpreter=/usr/bin/python3
  when: ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int >= 20
  tags:
    - vnc
    - x

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"
  tags:
    - vnc
    - x

# Only install RealVNC Server if VM is NOT headless
- name: verify that X server exists
  stat: path={{ XGUI.xsession_path }}
  register: xsession
  tags:
    - vnc
    - x

- name: verify that xterm session exists
  stat: path={{ XGUI.xterm_path }}
  register: xterm 
  tags:
    - vnc
    - x

- name: check to see if VNC server is running
  shell: /bin/ps aux | /bin/grep "/usr/bin/Xvnc-core :5 -auth /home/{{ ATMOUSERNAME }}/" | /bin/grep -v grep
  register: vnc_state
  tags:
    - vnc

- name: fail if OS does not contain a GUI
  fail: msg="OS does NOT have a GUI for VNC to run on."
  when: not (xsession.stat.exists and xterm.stat.exists)
  tags:
    - no-gui
    - vnc

- name: fail when VNC is not running
  fail: msg="VNC is NOT running for user '{{ ATMOUSERNAME }}'"
  when: vnc_state.stdout == ""
  tags:
    - vnc
    - check-vnc
